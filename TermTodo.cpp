#include <string>
#include <iostream>
#include <vector>
#include <iterator>
#include <ctime>

using namespace std;

//! Allows you to add an autogenerated timestamp
class Stamper {
  public:
    time_t timeStamp;
    Stamper() {
      timeStamp = time(0);
    }
};

class Item;

class List {
  private:
    vector<Item> items;
  public:
    void showItem(Item&);
    void showAllItems();
    void addItem(Item&);
    void removeItem(int);
    void toggleItem(int);
    void askForItem();
    void askForRemove();
    void askForToggle();
};

// Inheritance
class Item : public Stamper {
  private:
    bool status;
    std::string content;
  public:
    Item(std::string cont) {
      status = false;
      content = cont;
    }
    // Friend Function
    friend void List::showItem(Item& item);
    void toggle();
    //! Returns an icon based on status
    std::string statusIcon() {
      if (status) return "ðŸ—¸";
      return "âœ—";
    }
};

void Item::toggle() {
  status = !status;
}

//! Show the item through friend function
//! @param 'item' The item thar gives the content
void List::showItem(Item& item) {
  tm *ltm = localtime(&item.timeStamp);
  cout << ltm->tm_hour << ":" << ltm->tm_sec << " " << item.content << " " << item.statusIcon() << "\n";
}

void List::showAllItems() {
  vector<Item>::iterator itr;
  for (itr = items.begin(); itr != items.end(); itr++) {
    List::showItem(*itr);
  }
}

void List::addItem(Item& itm) {
  items.push_back(itm);
}

void List::removeItem(int i) {
  items.erase(items.begin() + i);
}

void List::toggleItem(int i) {
  items.at(i).toggle();
}

void List::askForItem() {
  std::string newContent;
  cout << "Contenido: ";
  cin >> newContent;
  Item newItem(newContent); 
  addItem(newItem);
}

void List::askForRemove() {
  int i;
  cout << "Index: ";
  cin >> i;
  removeItem(i);
}

void List::askForToggle() {
  int i;
  cout << "Index: ";
  cin >> i;
  items.at(i).toggle();
}

int main() {
  List list;
  std::string opt;
  do {
    cout << string( 100, '\n' );
    cout << "-------------Todo List-------------\n";
    list.showAllItems();
    cout << "\n\n";
    cout << "Options: \n";
    cout << "   1 Add Item\n";
    cout << "   2 Remove Item\n";
    cout << "   3 Toggle Item\n";
    cout << "   4 Exit\n";
    cin >> opt;
    if (opt == "1") list.askForItem();
    if (opt == "2") list.askForRemove();
    if (opt == "3") list.askForToggle();
  } while (opt != "4");
  return 0;
}

